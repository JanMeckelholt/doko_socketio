{"ast":null,"code":"var _jsxFileName = \"/home/jan/programming/doko_socketio/client/src/components/Doko/Doko.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Doko.css';\nimport Infobar from '../Infobar/Infobar';\nimport TextContainer from '../TextContainer/TextContainer';\nimport PlayerHand from '../PlayerHand/PlayerHand';\nimport PlayTable from '../PlayTable/PlayTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nconst Doko = ({\n  location\n}) => {\n  _s();\n\n  const SERVERENDPOINT = 'localhost:5000'; //const [name, setName] = useState('');\n  //const [room, setRoom] = useState('');\n  //const [player, setPlayer] = useState('');\n  //const [players, setPlayers] = useState('');\n\n  const [game, setGame] = useState({\n    trick: INITTRICK,\n    deck: [],\n    currentPlayerIndex: 0,\n    players: [],\n    room: ''\n  });\n  const [hand, setHand] = useState('');\n  const [trick, setTrick] = useState(['back', 'back', 'back', 'back']); //  const [nextPlayer, setNextPlayer] = useState('');\n\n  const getPlayer = () => {\n    if (game) {\n      return game.players.find(p => p.id === socket.id);\n    }\n  };\n\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); // console.log(location);\n    // setRoom(room);\n    // setName(name);\n\n    socket = io(SERVERENDPOINT);\n    console.log(socket);\n    console.log('name: ' + name, ', room: ' + room);\n    socket.emit('join', {\n      name,\n      room\n    }, game => {\n      setGame(game);\n    });\n    return () => {\n      socket.close();\n    };\n  }, [SERVERENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('gameUpdate', ({\n      game\n    }) => {\n      setGame(game);\n    });\n    socket.on('newCards', hand => {\n      console.log('newCards');\n      setHand(hand);\n    }); //socket.on('nextPlayer', (nextPlayer)=>{\n    //    setNextPlayer(nextPlayer);\n    //});      \n\n    socket.on('cardPlayed', data => {\n      console.log('card: ' + data.card + ' played by: ' + data.player.name);\n      console.log('players');\n      console.log(data.players);\n      console.log(data.trick);\n      const playerIndex = data.players.findIndex(p => p.id === data.player.id);\n      setTrick(data.trick);\n    });\n  }, []);\n\n  const dealCards = () => {\n    socket.emit('dealCards', {\n      game\n    }, () => {//    socket.emit('nextPlayer', {nextPlayer: players[0]});\n    });\n  };\n\n  const playCard = card => {\n    //console.log('playCard by: ' + player.name)\n    socket.emit('playerPlaysCard', {\n      playerId: socket.id,\n      card: card,\n      game: game\n    }, (error, trick) => {\n      if (error) {\n        console.log(error);\n      } //   const playerIndex = players.findIndex(p => p.id === player.id);\n      //   const nextplayer = players[playerIndex+1] ? players[playerIndex+1] : players[0];\n      //   socket.emit('nextPlayer', {nextPlayer});\n      //  console.log('nextPlayer: ' + nextPlayer);\n\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerPlayTable\",\n      children: [/*#__PURE__*/_jsxDEV(Infobar, {\n        room: game.room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayTable, {\n        trick: trick,\n        players: game.players,\n        dealCards: dealCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerPlayerHand\",\n      children: /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: getPlayer(),\n        hand: hand,\n        playCard: playCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      players: game.players\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Doko, \"gwdT7+N0dGNhJYXbQZCaY2nizrg=\");\n\n_c = Doko;\nexport default Doko;\n\nvar _c;\n\n$RefreshReg$(_c, \"Doko\");","map":{"version":3,"sources":["/home/jan/programming/doko_socketio/client/src/components/Doko/Doko.js"],"names":["React","useState","useEffect","queryString","io","Infobar","TextContainer","PlayerHand","PlayTable","socket","Doko","location","SERVERENDPOINT","game","setGame","trick","INITTRICK","deck","currentPlayerIndex","players","room","hand","setHand","setTrick","getPlayer","find","p","id","name","parse","search","console","log","emit","close","on","data","card","player","playerIndex","findIndex","dealCards","playCard","playerId","error"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\n\nimport './Doko.css';\n\nimport Infobar from '../Infobar/Infobar'\n\n\nimport TextContainer from '../TextContainer/TextContainer'\nimport PlayerHand from '../PlayerHand/PlayerHand'\nimport PlayTable from '../PlayTable/PlayTable'\n\nlet socket;\n\nconst Doko = ({location}) => {\n\n  \n\n    const SERVERENDPOINT = 'localhost:5000';\n    //const [name, setName] = useState('');\n    //const [room, setRoom] = useState('');\n    \n    //const [player, setPlayer] = useState('');\n    \n\n    //const [players, setPlayers] = useState('');\n    \n    const [game, setGame] = useState({trick: INITTRICK, deck: [], currentPlayerIndex:0, players:[], room:''});\n    const [hand, setHand] = useState('');\n    const [trick, setTrick] = useState(['back', 'back', 'back', 'back']);\n  //  const [nextPlayer, setNextPlayer] = useState('');\n\n    const getPlayer = () =>{\n        if (game){\n            return game.players.find(p=> p.id === socket.id);\n        }\n    }\n\n    useEffect(()=>{\n        const {name, room} = queryString.parse(location.search);\n        // console.log(location);\n        // setRoom(room);\n        // setName(name);\n        socket = io(SERVERENDPOINT);\n        console.log(socket);\n        console.log('name: ' + name, ', room: ' + room)\n\n        socket.emit('join', {name, room}, (game)=>{\n            setGame(game);\n        });  \n        \n        return () => {\n            socket.close();\n        }\n        \n    }, [SERVERENDPOINT, location.search]);\n\n    useEffect(()=>{\n        socket.on('gameUpdate', ({game})=>{\n            setGame(game);\n        });        \n        socket.on('newCards', (hand)=>{\n            console.log('newCards')\n            setHand(hand);\n        });        \n        //socket.on('nextPlayer', (nextPlayer)=>{\n        //    setNextPlayer(nextPlayer);\n        //});      \n        socket.on('cardPlayed', (data)=>{\n            console.log('card: '+ data.card + ' played by: ' + data.player.name)\n            console.log('players');\n            console.log(data.players)\n            console.log(data.trick);\n\n            const playerIndex = data.players.findIndex(p => p.id === data.player.id);\n            setTrick(data.trick);\n        });\n    }, []);\n\n    const dealCards = ()=>{\n        socket.emit('dealCards', {game}, ()=>{\n    //    socket.emit('nextPlayer', {nextPlayer: players[0]});\n            \n        });\n    };\n\n    const playCard = (card)=>{\n        //console.log('playCard by: ' + player.name)\n        socket.emit('playerPlaysCard', {playerId: socket.id, card: card, game: game}, (error, trick)=>{\n            if (error) {console.log(error);}\n         //   const playerIndex = players.findIndex(p => p.id === player.id);\n         //   const nextplayer = players[playerIndex+1] ? players[playerIndex+1] : players[0];\n         //   socket.emit('nextPlayer', {nextPlayer});\n          //  console.log('nextPlayer: ' + nextPlayer);\n            \n        });\n    };\n\n\n    return(\n        <div className=\"outerContainer\">\n            <div className=\"containerPlayTable\">\n                <Infobar room={game.room} />\n                <PlayTable trick={trick} players={game.players} dealCards={dealCards}/>\n               \n\n            </div>\n            <div className=\"containerPlayerHand\">\n                <PlayerHand player={getPlayer()} hand={hand} playCard={playCard}/>\n            </div>\n            <TextContainer players={game.players}/>\n        </div>\n    )\n}\n\nexport default Doko;\n"]},"metadata":{},"sourceType":"module"}